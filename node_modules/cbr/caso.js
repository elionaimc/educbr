/*
 * Descreve um caso genérico.
 * Os atributos serão determinados com base nas informações fornecidas
 * a partir da base de casos ou pela descrição dada a um novo caso
 */
var Caso = function(caso)
{
	this.demandas = {};
	
    for (var atributo in caso)
    {
        if (atributo !== "demandas") {
		    this[atributo] = caso[atributo];
		}
		else {
			for (var demanda in caso.demandas)
			{
				this.demandas[demanda] = caso.demandas[demanda];
			}
		}
    }
};

/*
 * Realiza o cálculo euclidiano para distâncias
 * d(x,y) = raiz(
 *               ((x1-y1) * (x1-y1)) + 
 *               ((x2 - y2) * (x2 - y2)) +
 *               ...
 *               ((xN - yN) * (xN - yN))
 *           );
 * Para efeito amplificador da distância, foi inserido
 * no cálculo o coeficiente de classes das demandas assim:
 * f = ( (d1*p1) + (d2*p2) + (dN*pN) ) / S, onde:
 * d = demanda,
 * p = peso da classe correspondente,
 * S é a quantidade total de demandas
 */
Caso.prototype.calcularDistancias = function()
{
	for (var i in this.vizinhos)
	{
		var vizinho = this.vizinhos[i];
		var deltaDemandas = 0;
		
		for (var i in this.demandas){
			if (vizinho.demandas[i]!==undefined){
				var x = vizinho.demandas[i] - this.demandas[i]; // diferença entre atributos
				x = x / this.pesoDemandas;                      // dividida pelo coeficiente do peso
				deltaDemandas = deltaDemandas + x * x;          // ao quadrado
			}
			else {                                              // se o atributo não existe no vizinho
				var x = 1 / this.pesoDemandas;                  // diferença = 1 dividida pelo coeficiente do peso
				deltaDemandas = deltaDemandas + x * x;          // ao quadrado
			}	
		}

		vizinho.distancia = Math.sqrt(deltaDemandas);
	}
}

/*
 * Seleciona os k-vizinhos mais próximos
 * Retorna uma lista de casos que podem ser recuperados em ordem de proximidade
 * de forma a propor as melhores soluções baseando-se nos k-casos mais similares
 */
Caso.prototype.AnalisarVizinhanca = function(k)
{
	
    var classes = {};
	this.kNN = [];
	
	for (var i in this.vizinhos.slice(0, k))
	{
		var vizinho = {casoId: 0, distancia: 0};
		vizinho.casoId = this.vizinhos[i]._id;
		vizinho.distancia = this.vizinhos[i].distancia;
		
        if (!classes[this.vizinhos[i].classe])
        {
            classes[this.vizinhos[i].classe] = 0;
        }

        classes[this.vizinhos[i].classe] += 1;
		this.kNN.push(vizinho);
	}
	
    var agrupamento = {classe: false, total: 0};
	
    for (var classe in classes)
    {
        if (classes[classe] > agrupamento.total)
        {
            agrupamento.classe = classe;
            agrupamento.total = classes[classe];
        }
    }
	
	this.agrupamento = classes;

	return this.kNN; // retorna os k-vizinhos mais próximos
};

/*
 * Ordena os vizinhos por distância em ordem crescente
 */
Caso.prototype.ordenarVizinhos = function() {
	this.vizinhos.sort(function (a, b) {
		return a.distancia - b.distancia;
	});
};

exports = module.exports = Caso; // exporta a classe Caso como um módulo