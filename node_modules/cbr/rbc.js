/*
 * Depende do modelo de Casos
 */
var Caso = require('rbc/caso.js');

/*
 * Descreve a classe que implementa os processos de Raciocínio Baseado em Casos
 * Como baseamos nosso cálculo de similaridade com o algoritmo do vizinho mais próximo,
 * recebe um valor k que é a quantidade de baseDeCasos similares que irão prover soluções
 * p. e., para calcular distância para 5 vizinhos próximos, k = 5
 */
var RBC = function(k)
{
    this.baseDeCasos = [];
    this.k = k;
};

/*
 * Descreve o primeiro processo RBC, recebe um caso incompleto e percorre
 * e analisa a Base de Casos em busca de baseDeCasos similares
 */
RBC.prototype.recuperar = function(teste)
{
	teste.vizinhos = []; // cria uma lista vazia de vizinhos no caso-teste
	
	/* adiciona a base de conhecimento à vizinhança do teste */
	for (var i in this.baseDeCasos)
	{
		teste.vizinhos.push(new Caso(this.baseDeCasos[i]));
	}

	/* Calcular distâncias */
	teste.calcularDistancias();
	
	/* Ordena do mais próximo ao mais distante */
	teste.ordenarVizinhos();

	/* Selecionar os k-vizinhos */
	teste.AnalisarVizinhanca(this.k);
	console.log(teste.agrupamento);
	return teste.kNN;
};

/*
 * Descreve método para adcionar casos
 */
RBC.prototype.add = function(caso) {
    this.baseDeCasos.push(caso);
};

exports = module.exports = RBC; // exporta a classe RBC como módulo